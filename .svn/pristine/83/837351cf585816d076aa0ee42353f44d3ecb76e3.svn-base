using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace ACA_BreakCommunication
{
    public class SuyiMCCB
    {
        private SerialPort rs485=new SerialPort();
        private  static int connectAddress;
        protected const int NoMatch_Max = 5;  //超过5次通信仍未连接判断为通信失败
        protected const byte Start = 0x68; //通信起始符号
        protected const byte End = 0x16; //通信结束符号
        protected const byte Mask = 0x33;
        private Dictionary<DataIdentification, DI> dic=new Dictionary<DataIdentification, DI>();
        private AddressByte Address = new AddressByte(connectAddress);
        private bool CommunicationOK=false;
        private bool CommunicationState = false;
        
        public SuyiMCCB()
        {
            dic.Add(DataIdentification.CommunicationTest, new DI(0x01, 0x01, 0x00, 0x04));
            dic.Add(DataIdentification.ReadCurrent, new DI(0x00, 0xff, 0x02, 0x02));
            dic.Add(DataIdentification.ReadVoltage, new DI(0x00, 0xff, 0x01, 0x02));
            dic.Add(DataIdentification.ReadResidualCurrent, new DI(0x00, 0xff, 0x90, 0x02));
            dic.Add(DataIdentification.CloseSwitch, new DI(0x01, 0x02, 0x01, 0x06));
            dic.Add(DataIdentification.ReadStateWord1, new DI(0x01, 0x05, 0x00, 0x04));
            dic.Add(DataIdentification.EnterCurrentDebuggingMode, new DI(0x00, 0x02, 0x00, 0x00));
            dic.Add(DataIdentification.CurrentProofreading1, new DI(0x01, 0x02, 0x00, 0x00));
            dic.Add(DataIdentification.CurrentProofreading2, new DI(0x02, 0x02, 0x00, 0x00));
            dic.Add(DataIdentification.CurrentProofreading3, new DI(0x03, 0x02, 0x00, 0x00));
            dic.Add(DataIdentification.QuitCurrentDebuggingMode, new DI(0xff, 0x02, 0x00, 0x00));
            dic.Add(DataIdentification.EnterVoltageDebuggingMode, new DI(0x00, 0x01, 0x00, 0x00));
            dic.Add(DataIdentification.VoltageProofreading1, new DI(0x01, 0x01, 0x00, 0x00));
            dic.Add(DataIdentification.VoltageProofreading2, new DI(0x02, 0x01, 0x00, 0x00));
            dic.Add(DataIdentification.EnterResidualCurrentDebuggingMode, new DI(0x00, 0x03, 0x00, 0x00));
            dic.Add(DataIdentification.ResidualCurrentProofreading1, new DI(0x01, 0x03, 0x00, 0x00));
            dic.Add(DataIdentification.ResidualCurrentProofreading2, new DI(0x02, 0x03, 0x00, 0x00));
            dic.Add(DataIdentification.ResidualCurrentProofreading3, new DI(0x03, 0x03, 0x00, 0x00));
            dic.Add(DataIdentification.EnterTransientCurrentMode, new DI(0x00, 0x04, 0x00, 0x00));
            dic.Add(DataIdentification.CurrentInstantaneousValue, new DI(0x01, 0x04, 0x00, 0x00));
            dic.Add(DataIdentification.QuitTransientCurrentMode, new DI(0xff, 0x04, 0x00, 0x00));



        }
        public SerialPort Rs485 { get => rs485; set => rs485 = value; } //用于通信的serialport
        public int ConnectAddress { get => connectAddress; set => connectAddress = value; }  //配置地址属性
        /// <summary>
        ///  测试通信的方法，通信成功返回true，失败返回false；
        /// </summary>
        /// <returns></returns>
        public bool CommunicationTest() //测试通信
        {
            ReadCmd readCmd = new ReadCmd();
            readCmd.start = Start;
            readCmd.address0 = Address.a0;
            readCmd.address1 = Address.a1;
            readCmd.address2 = Address.a2;
            readCmd.address3 = Address.a3;
            readCmd.address4 = Address.a4;
            readCmd.address5 = Address.a5; ;
            readCmd.datastart = Start;
            readCmd.controlCode = (byte)ControlCode.Read;
            readCmd.dataLength = 0x04;
            readCmd.di0 =(byte)(dic[DataIdentification.CommunicationTest].di0+Mask);
            readCmd.di1 =(byte)(dic[DataIdentification.CommunicationTest].di1+Mask);
            readCmd.di2 =(byte)(dic[DataIdentification.CommunicationTest].di2+Mask);
            readCmd.di3 = (byte)(dic[DataIdentification.CommunicationTest].di3+Mask);
            readCmd.cs = GetCS(new byte[]{readCmd.start,readCmd.address0,readCmd.address1,readCmd.address2,readCmd.address3,readCmd.address4,readCmd.address5
            ,readCmd.datastart,readCmd.controlCode,readCmd.dataLength,readCmd.di0,readCmd.di1,readCmd.di2,readCmd.di3}, 14);
            readCmd.end = End;
            byte[] bytes = {readCmd.start,readCmd.address0,readCmd.address1,readCmd.address2,readCmd.address3,readCmd.address4,readCmd.address5
            ,readCmd.datastart,readCmd.controlCode,readCmd.dataLength,readCmd.di0,readCmd.di1,readCmd.di2,readCmd.di3,readCmd.cs,readCmd.end};
            SendData(bytes);
            if (CommunicationOK)
            {
                CommunicationState = true;
                CommunicationOK = false;
            }
            else CommunicationState = false;
            return CommunicationState;  
        }
        public int  WaitCurrentValue() //读取产品应答的瞬时电流值
        {
            int result = 0;
            byte[] nb = Encoding.Default.GetBytes(rs485.ReadExisting()); //如何计算出瞬时电流值需要后续的返回帧
            return result; 

        }
        public int ReadSwitchState()
        {
            int  State1=Read(DataIdentification.ReadStateWord1);
            if (((State1-Mask) & 0x60) == 0x20)
            {
              return 1;  //1为合闸
            }
            else return 0;
        }
        /// <summary>
        /// 读取数据方法，返回数据为处理之后的数据，为字节数组
        /// </summary>
        /// <param name="dataIdentification">对应数据的标识码</param>
        /// <returns></returns>
        public int Read(DataIdentification dataIdentification)   //读取方法负责（状态指令1，电流指令）
        {
            List<int> list = new List<int>();
            int result = 0;
            ReadCmd readCmd = new ReadCmd();
            readCmd.start = Start;
            readCmd.address0 = Address.a0;
            readCmd.address1 = Address.a1;
            readCmd.address2 = Address.a2;
            readCmd.address3 = Address.a3;
            readCmd.address4 = Address.a4;
            readCmd.address5 = Address.a5; ;
            readCmd.datastart = Start;
            readCmd.controlCode = (byte)ControlCode.Read;
            readCmd.dataLength = 0x04;
            readCmd.di0 = (byte)(dic[dataIdentification].di0 + Mask);
            readCmd.di1 = (byte)(dic[dataIdentification].di1 + Mask);
            readCmd.di2 = (byte)(dic[dataIdentification].di2 + Mask);
            readCmd.di3 = (byte)(dic[dataIdentification].di3 + Mask);
            readCmd.cs = GetCS(new byte[]{readCmd.start,readCmd.address0,readCmd.address1,readCmd.address2,readCmd.address3,readCmd.address4,readCmd.address5
            ,readCmd.datastart,readCmd.controlCode,readCmd.dataLength,readCmd.di0,readCmd.di1,readCmd.di2,readCmd.di3}, 14);
            readCmd.end = End;
            byte[] bytes = {readCmd.start,readCmd.address0,readCmd.address1,readCmd.address2,readCmd.address3,readCmd.address4,readCmd.address5
            ,readCmd.datastart,readCmd.controlCode,readCmd.dataLength,readCmd.di0,readCmd.di1,readCmd.di2,readCmd.di3,readCmd.cs,readCmd.end};
            byte[] ByteBack = SendData(bytes);
            if ((ByteBack[0] == Start) && (ByteBack[8] == 0x91)) //返回数据的判断
            {
                if (dataIdentification == DataIdentification.ReadStateWord1)
                {
                    return ByteBack[14];
                }
                else
                {
                    for (int i = 0; i < ByteBack[9] - 4; i++)
                    {
                        list.Add((ByteBack[i + 14]-Mask) & 0xf0);
                        list.Add((ByteBack[i + 14]-Mask) & 0x0f);
                    }
                    for (int i = list.Count - 1; i > 0; i--)
                    {
                        result += list[i] * 10;
                    }
                    return result / 10;
                }
            }
            else return -1;


        }
        public bool Write(DataIdentification dt)
        {
            return true;
        }
        /// <summary>
        /// 合闸操作方法
        /// </summary>
        /// <param name="data">执行合闸的预约时间</param>
        /// <returns></returns>
        public bool CloseSwitch()   //合闸操作
        {
            byte[] ByteSend = new byte[]
            {
              Start,Address.a0,Address.a1,Address.a2,Address.a3,Address.a4,Address.a5,Start,(byte)ControlCode.control,14,(byte)(dic[DataIdentification.CloseSwitch].di0+Mask),
               (byte)(dic[DataIdentification.CloseSwitch].di1+Mask),(byte)(dic[DataIdentification.CloseSwitch].di2+Mask),(byte)(dic[DataIdentification.CloseSwitch].di3+Mask),(byte)(Password.pa+Mask)
                ,(byte)(Password.p0+Mask),(byte)(Password.p1+Mask),(byte)(Password.p2+Mask),(byte)(Operator.c0+Mask),(byte)(Operator.c1+Mask),(byte)(Operator.c2+Mask),(byte)(Operator.c3+Mask),0x33,0x35,0,0x16 
            };
            byte cs = GetCS(ByteSend, ByteSend.Length-2);
            ByteSend[ByteSend.Length - 2] = cs;
            byte[] ByteBack = SendData(ByteSend);
            if ((ByteBack[0] == Start) && (ByteBack[8] == 0x9c) && (ByteBack[9] == 0x00))
            {
                return true;
            }
            else return false;

        }
        /// <summary>
        /// 远程调试模式
        /// </summary>
        /// <param name="data"></param>
        /// <param name="dataIdentification">不同调试功能的标识符</param>
        /// <returns></returns>
        public bool Debugging( DataIdentification dataIdentification)
        {
            byte[] ByteSend = new byte[]
            {
                 Start,Address.a0,Address.a1,Address.a2,Address.a3,Address.a4,Address.a5,Start,(byte)ControlCode.debugging,12,
                 (byte)(dic[dataIdentification].di0+Mask),(byte)(dic[dataIdentification].di1+Mask),(byte)(dic[dataIdentification].di2+Mask),
                 (byte)(dic[dataIdentification].di3+Mask),(byte)(Password.pa+Mask),(byte)(Password.p0+Mask),(byte)(Password.p1+Mask)
                 ,(byte)(Password.p2+Mask),(byte)(Operator.c0+Mask),(byte)(Operator.c1+Mask), (byte)(Operator.c2+Mask),(byte)(Operator.c3+Mask)
                 ,0,0x16

            };
            ByteSend[ByteSend.Length-2] =GetCS(ByteSend,ByteSend.Length-2);
            byte[] ByteBack = SendData(ByteSend);
            if ((ByteBack[0] == Start) && (ByteBack[8] == 0x9f) && (ByteBack[9] == 0x00))
            {
                return true;
            }
            else return false;
        }
        public int Proof(int data ,DataIdentification dataIdentification)
        {
            List<int> list = new List<int>();
            int result=0;
            byte[] ByteSend = new byte[]
           {
                 Start,Address.a0,Address.a1,Address.a2,Address.a3,Address.a4,Address.a5,Start,(byte)ControlCode.debugging,13,
                 (byte)(dic[dataIdentification].di0+Mask),(byte)(dic[dataIdentification].di1+Mask),(byte)(dic[dataIdentification].di2+Mask),
                 (byte)(dic[dataIdentification].di3+Mask),(byte)(Password.pa+Mask),(byte)(Password.p0+Mask),(byte)(Password.p1+Mask)
                 ,(byte)(Password.p2+Mask),(byte)(Operator.c0+Mask),(byte)(Operator.c1+Mask), (byte)(Operator.c2+Mask),(byte)(Operator.c3+Mask)
                 ,(byte)(data+Mask),0,0x16

           };
            ByteSend[ByteSend.Length - 2] = GetCS(ByteSend, ByteSend.Length - 2);
            byte[] ByteBack = SendData(ByteSend);
            if ((ByteBack[0] == Start) && (ByteBack[8] == 0x9f) && (ByteBack[9] == 0x00))
            {
                for (int i = 0; i < ByteBack[9]-4; i++)
                {
                    list.Add(ByteBack[i+14]&0xf0);
                    list.Add(ByteBack[i+14] &0x0f);
                }
            }
            for (int i = list.Count-1; i < 0; i--)
            {
                result += list[i] * 10;
            }
            return result / 10;
        }
        public bool RecoveryFactorySet() //恢复出厂设置
        {
            return true;
        }
        /// <summary>
        /// 串口发送字节数组
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns></returns>
        public byte[] SendData(byte[] bytes)   //发送字节数组（485），并处理设备返回来的数据
        {
            int ErroCount = 0;
            byte[] byteBack = new byte[50];
            byte[] ReturnByte = new byte[50];
                while (!CommunicationOK)
                {
                  try
                   {
                     if (ErroCount < NoMatch_Max)
                     {

                        if (rs485.IsOpen)
                        {
                            rs485.Write(bytes, 0, bytes.Length);
                            Thread.Sleep(200);
                            rs485.Read(byteBack, 0, 50);
                            //byte[] byteBcak = Encoding.Default.GetBytes(rs485.ReadExisting()); //读取返回的信息
                            ReturnByte = GetByteCorrect(byteBack, ref CommunicationOK);
                            ErroCount++;
                        }
                        else rs485.Open();
                     }
                    else break;
                    }
                  catch(Exception)
                   {
                      ErroCount++;
                   }
                }
            return ReturnByte;
        }
        /// <summary>
        /// 获取正确的返回数据
        /// </summary>
        /// <param name="byteBack">返回字节数组</param>
        /// <param name="communicationState">通信状态</param>
        /// <returns></returns>
        private byte[] GetByteCorrect(byte[] byteBack,ref bool communicationState)
        {
            int count = 0;
            bool ReceiveStart = false;                                           
            bool ReceiveEnd = false;
            byte[] ByteReceive = new byte[100];
            foreach (byte item in byteBack)
            {
                if (item == Start)   //有起始符号
                {
                    ReceiveStart = true;
                }
                if (ReceiveStart)
                {
                    ByteReceive[count] = item;
                    count++;
                }
                if (item == End) //有结束字符
                {
                    if (( ByteReceive[count - 2]) == GetCS(ByteReceive, count - 2))    //接收过来的字节cs校验正确
                    {
                        ReceiveEnd = true;//接收数据完成
                        communicationState = true;
                        break;
                    }
                }
            }
            if (ReceiveEnd)
            {
                byte[] ByteCorrect = new byte[count];
                for (int i = 0; i < count; i++)
                {
                    ByteCorrect[i] = ByteReceive[i];
                }
                return ByteCorrect;
            }
            else return new byte[] { 0xff, 0xff, 0xff, 0xff };    //返回错误数组，表明bytebcak中不包含正确的字节帧
        }
        /// <summary>
        /// 字节获取校验码
        /// </summary>
        /// <param name="bt">字节数组</param>
        /// <param name="n">长度</param>
        /// <returns></returns>
        private Byte GetCS(byte[] bt,int n)
        {
            int ByteSum=0;
            for (int i = 0; i < n; i++)
            {
                ByteSum += bt[i];
            }
            ByteSum = ByteSum % 256;
            return (byte)(ByteSum & 0xff);

        }
        private enum ControlCode :byte
        {
            Read = 0x11,
            control=0x1c,
            debugging=0x1f,

        }
        public enum Password:byte
        {
            pa=0x00,
            p0=0x00,
            p1=0x00,
            p2=0x00,
        }
        public enum Operator:byte
        {
            c0=0x00,
            c1=0x00,
            c2=0x00,
            c3=0x00,
        }
        public enum DataIdentification
        {
            CommunicationTest,//读取当前时期指令，默认为用来测试通信
            ReadCurrent,//读取当前A,B,C三相电流值
            ReadVoltage,//读取当前ABC三相电压值
            ReadResidualCurrent,//读取当前剩余电流值
            OpenSwitch,//开闸
            CloseSwitch,//合闸
            ReadStateWord1,//读取状态字1，里面有开关闸状态
            EnterVoltageDebuggingMode,//进入电压调试模式
            VoltageProofreading1,    //电压调试校准点1电压
            VoltageProofreading2,    //电压调试校准点2电压
            VoltageProofreading3,     //电压调试校准点3电压
            VoltageProofreading4,    //电压调试校准点4电压
            VoltageProofreading5,     //电压调试校准点5电压
            QuitVoltageDebuggingMode,  //退出电压调试模式
            EnterCurrentDebuggingMode,//进入电流调试模式
            CurrentProofreading1,//电流调试校准点1电流
            CurrentProofreading2,//电流调试校准点2电流
            CurrentProofreading3,//电流调试校准点3电流
            CurrentProofreading4,//电流调试校准点2电流
            CurrentProofreading5,//电流调试校准点3电流
            QuitCurrentDebuggingMode, //退出电流调试模式
            EnterResidualCurrentDebuggingMode,//进入剩余电流调试模式
            ResidualCurrentProofreading1, //剩余电流调试校准点1电流
            ResidualCurrentProofreading2, //剩余电流调试校准点2电流
            ResidualCurrentProofreading3, //剩余电流调试校准点3电流
            ResidualCurrentProofreading4, //剩余电流调试校准点2电流
            ResidualCurrentProofreading5, //剩余电流调试校准点3电流
            QuitResidualCurrentDebuggingMode, //退出剩余电流调试模式
            EnterTransientCurrentMode,//进入瞬时电流测试状态
            CurrentInstantaneousValue,//当前瞬时电流值和电流相位
            QuitTransientCurrentMode,//退出瞬时电流调试模式
            SendPeakValue,//发送实际峰值
        }
        public struct AddressByte
        {
            public byte a0;
            public byte a1;
            public byte a2;
            public byte a3;
            public byte a4;
            public byte a5;
            public AddressByte(int connectAddress)
            {
                this.a0 = (byte)(connectAddress & 0xff);
                this.a1 = (byte)((connectAddress & 0xff00) >> 8);
                this.a2 = (byte)((connectAddress & 0xff0000) >> 16);
                this.a3= (byte)((connectAddress & 0xff000000) >> 24);
                this.a4 = (byte)((connectAddress & 0xff00000000) >> 32);
                this.a5 = (byte)((connectAddress & 0xff0000000000) >> 40);
            }
        }
        
        protected struct ReadCmd
        {
            public byte start;
            public byte address0;
            public byte address1;
            public byte address2;
            public byte address3;
            public byte address4;
            public byte address5;
            public byte datastart;
            public byte controlCode;
            public byte dataLength;
            public byte di0;
            public byte di1;
            public byte di2;
            public byte di3;
            public byte cs;
            public byte end;
        }
        public struct DI
        {
            public byte di0;
            public byte di1;
            public byte di2;
            public byte di3;
            public DI(byte di0, byte di1, byte di2, byte di3)
            {
                this.di0 = di0;
                this.di1 = di1;
                this.di2 = di2;
                this.di3 = di3;
            }
        }
    }

}
